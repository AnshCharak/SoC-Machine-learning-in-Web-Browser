Neural Networks and Deep Learning
notes / snippets:

https://docs.google.com/document/d/1r6lM2OCL8wyJ3peJt90yi3Dadr8GA9wN3vZrURB0EXU/edit?usp=sharing


'''Vectorized and for loop versions'''

import time
a=np.random.rand(1000000)
b=np.random.rand(1000000)

tic=time.time()
c=np.dot(a,b)
toc=time.time()
print("Vectorized version:" + str(1000*(toc-tic))+ "ms")

c=0
tic=time.time()
for i in range(1000000):
    c+=a[i]*b[i]
toc=time.time()    
print(c)
print("for loop version:" + str(1000*(toc-tic))+ "ms")




# In[5]:
for i in range(1000):
    Z=np.dot(w.T,x) + b
    A=sigma(z)
    dz=A-Y
    db=(1/m)*np.sum(dz)
    dw=(1/m)*np.dot(x,dz.T)
    w=w-alpha*dw
    b=b-alpha*db



'''Basic Sigmoid fucntion'''

import math

def basic_sigmoid(x):
    s = 1/(1+math.exp(-x))
    return s
basic_sigmoid(2)



'''Broadcasting'''

x = np.array([1, 2, 3])
print(np.exp(x))

x = np.array([1, 2, 3])
print (x + 3)



'''Sigmoid fucntion'''

def sigmoid(x):
    s = 1/(1+np.exp(-x))
    return s
sigmoid(2)



'''gradient of the sigmoid fxn'''

def sigmoid_derivative(x):
    s = sigmoid(x)
    ds = s*(1-s)
    return ds

x = np.array([1, 2, 3])
print ("sigmoid_derivative(x) = " + str(sigmoid_derivative(x)))



'''image to vector'''

def image2vector(image):
    v = image.reshape(image.shape[0]*image.shape[1]*image.shape[2], 1)
    return v



image = np.array([[[ 0.67826139,  0.29380381],
        [ 0.90714982,  0.52835647],
        [ 0.4215251 ,  0.45017551]],

       [[ 0.92814219,  0.96677647],
        [ 0.85304703,  0.52351845],
        [ 0.19981397,  0.27417313]],

       [[ 0.60659855,  0.00533165],
        [ 0.10820313,  0.49978937],
        [ 0.34144279,  0.94630077]]])

print ("image2vector(image) = " + str(image2vector(image)))



'''Normalization'''

def normalizeRows(x):
    x_norm = np.linalg.norm(x, ord = 2, axis = 1, keepdims = True)
    x = x/x_norm
    print(x.shape, x_norm.shape)
    return x
x = np.array([
    [0, 3, 4],
    [1, 6, 4]])
print("normalizeRows(x) = " + str(normalizeRows(x)))



'''L1 and L2 calc'''

def L1(yhat, y):
    loss = np.sum(abs(y-yhat))
    return loss

yhat = np.array([.9, 0.2, 0.1, .4, .9])
y = np.array([1, 0, 0, 1, 1])
print("L1 = " + str(L1(yhat,y)))

def L2(yhat, y):
    loss = np.sum(np.dot(y-yhat,y-yhat))
    return loss

yhat = np.array([.9, 0.2, 0.1, .4, .9])
y = np.array([1, 0, 0, 1, 1])
print("L2 = " + str(L2(yhat,y)))







